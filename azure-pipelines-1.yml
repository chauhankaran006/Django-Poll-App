# Docker
# Build a Docker image
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- master

resources:
- repo: self

variables:
  imageRepo: pollmeapp
  tag: '$(Build.BuildId)'

stages:
- stage: Build
  displayName: Build image
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: windows-2019
    steps:
    - task: Docker@2
      displayName: Build an image
      inputs:
        containerRegistry: 'my3rddemoacr'
        repository: '$(imageRepo)'
        command: 'buildAndPush'
        Dockerfile: '$(Build.SourcesDirectory)/Dockerfile'
        tags: |
          $(tag)
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Pipeline.Workspace)/s/kubernetes'
        ArtifactName: 'manifests'
        publishLocation: 'Container'
- stage: Deploy
  displayName: Deploy to Dev
  dependsOn: Build
  variables:
    acrsecret: k8sexamplesacrauth
    acrdevurl: 'my3rddemoacr.azurecr.io'
    replicaNo: 4
  jobs:
    - job: Deploy
      displayName: Deploy to AKS
      pool:
        vmImage: windows-2019
      steps:
      - task: DownloadPipelineArtifact@2
        displayName: 'Download Pipeline Artifact'
        inputs:
          buildType: 'current'
          artifactName: 'manifests'
          targetPath: '$(Pipeline.Workspace)/manifests'
      - task: KubernetesManifest@0
        displayName: 'Creating K8s Secrets For ACR'
        inputs:
          action: 'createSecret'
          kubernetesServiceConnection: 'kubernetesConnection'
          namespace: 'default'
          secretType: 'dockerRegistry'
          secretName: '$(acrsecret)'
          dockerRegistryEndpoint: 'my3rddemoacr'
      - task: AzureKeyVault@2
        displayName: 'Downloading Storage Account Access Key From Azure Key Vault Secret'
        inputs:
          azureSubscription: 'Visual Studio Enterprise Subscription â€“ MPN(d9fd8068-6e3b-46d6-9951-5cf3dbf74daa)'
          KeyVaultName: 'my-3rd-demo-key-vault'
          SecretsFilter: 'AzureStorageAccountName,AzureStorageAccountKey'
          RunAsPreJob: false
      - task: KubernetesManifest@0
        displayName: 'Creating K8s Secret For Access File Share'
        inputs:
          action: 'createSecret'
          kubernetesServiceConnection: 'kubernetesConnection'
          namespace: 'default'
          secretType: 'generic'
          secretName: 'azure-secret-fshare'
          secretArguments: '--from-literal=azurestorageaccountname=$(AzureStorageAccountName) --from-literal=azurestorageaccountkey=$(AzureStorageAccountKey)'
      - task: HelmDeploy@0
        displayName: 'Add Secret Strore CSI Driver Helm Repo'
        inputs:
          connectionType: 'Kubernetes Service Connection'
          kubernetesServiceConnection: 'kubernetesConnection'
          namespace: 'deafult'
          command: 'repo'
          arguments: 'add csi-secrets-store-provider-azure https://azure.github.io/secrets-store-csi-driver-provider-azure/charts'
      - task: HelmDeploy@0
        displayName: 'Installing CSI Driver Helm Package'
        inputs:
          connectionType: 'Kubernetes Service Connection'
          kubernetesServiceConnection: 'kubernetesConnection'
          namespace: 'default'
          command: 'install'
          chartType: 'Name'
          chartName: 'csi-secrets-store-provider-azure/csi-secrets-store-provider-azure'
          releaseName: 'csi-azure-driver'
          overrideValues: 'windows.enabled=true,secrets-store-csi-driver.windows.enabled=true,secrets-store-csi-driver.syncSecret.enabled=true'
      - task: replacetokens@5
        displayName: Replace Tokens
        inputs:
          rootDirectory: '$(Pipeline.Workspace)/manifests/'
          targetFiles: 'pool-app-deployment.yml'
          encoding: 'auto'
          tokenPattern: 'custom'
          tokenPrefix: '#'
          tokenSuffix: '#'
          writeBOM: true
          actionOnMissing: 'warn'
          keepToken: false
          actionOnNoFiles: 'continue'
          enableTransforms: false
          enableRecursion: false
          useLegacyPattern: false
          enableTelemetry: true
      - task: KubernetesManifest@0
        displayName: 'Applying Manifests Files'
        inputs:
          action: 'deploy'
          kubernetesServiceConnection: 'kubernetesConnection'
          namespace: 'default'
          manifests: |
            $(Pipeline.Workspace)/manifests/poll-app-pv.yml
            $(Pipeline.Workspace)/manifests/poll-app-pvc.yml
            $(Pipeline.Workspace)/manifests/poll-app-secret-provider-class.yml
            $(Pipeline.Workspace)/manifests/pool-app-deployment.yml
          containers: '$(acrdevurl)/$(imageRepo):$(tag)'